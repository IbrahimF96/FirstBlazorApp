@inject IAnimeCardService AnimeCardService;
@inject IHighScoreService HighScoreService;
@implements IDisposable


@if (Cards is not null)
{
    @if (!IsGameOver)
    {
        <div class="game-container">
            @foreach (AnimeCardDTO card in Cards)
            {
                <CardComponent Card="card" OnCardFlipped="HandleCardFlippedAsync" MatchingInProgress="matchingInProgress" />
            }
        </div>
    }
    else
    {
        <p class="Message">Well done, you won! Your score was @(1000 - (NumberOfFailedAttempts * 10)) </p>
        <HighScoreTableComponent />
    }
}
else
{
    <p class="Message">Loading...</p>
}




@code {
    [Parameter]
    public HighScoreDTO? highScoreDto { get; set; }

    [Parameter]
    public int NumberOfFailedAttempts { get; set; }

    [Parameter]
    public EventCallback<int> NumberOfFailedAttemptsChanged { get; set; }

    List<AnimeCardDTO> Cards = new();

    private bool matchingInProgress = false; // Flag to track if matching is in progress

    private int NumberOfMatches = 0;

    bool IsGameOver => NumberOfMatches == 6;

    List<AnimeCardDTO> cardsToMatch = new List<AnimeCardDTO>(); // Track flipped cards

    private Timer Timer;

    protected override async Task OnInitializedAsync()
    {
        Cards = await AnimeCardService.GetCardsAsync();
        Shuffle(Cards);
    }


    private async Task HandleCardFlippedAsync(AnimeCardDTO card)
    {
        if (!matchingInProgress && !card.HasMatched)
        {
            UpdateCardsToMatchList(card);

            if (cardsToMatch.Count == 2)
            {
                await HandleMatchingCardsAsync();
            }
        }
    }

    static void Shuffle<T>(List<T> list)
    {
        Random rng = new Random();
        int n = list.Count;
        while (n > 1)
        {
            n--;
            int k = rng.Next(n + 1);
            T value = list[k];
            list[k] = list[n];
            list[n] = value;
        }
    }

    void UpdateCardsToMatchList(AnimeCardDTO card)
    {

        if (card.IsFlipped)
        {
            if (!cardsToMatch.Contains(card))
            {
                cardsToMatch.Add(card);
            }

        }
        else
        {
            if (cardsToMatch.Contains(card))
            {
                cardsToMatch.Remove(card);
            }
        }
    }

    async Task HandleMatchingCardsAsync()
    {
        matchingInProgress = true;

        if (cardsToMatch[0].Anime == cardsToMatch[1].Anime)
        {
            await MatchCardsAsync();
        }
        else
        {
            UnMatchCards();
        }
    }

    void SaveHighScore()
    {
        if (highScoreDto is not null)
        {
            highScoreDto.Id = Guid.NewGuid();
            highScoreDto.Score = 1000 - (NumberOfFailedAttempts * 10);

            Task task = HighScoreService.AddScoreAsync(highScoreDto);
        }
    }

    async Task MatchCardsAsync()
    {
        foreach (AnimeCardDTO card in cardsToMatch)
        {
            AnimeCardDTO? cardToUpdate = Cards.Find(c => c.Id == card.Id);
            if (cardToUpdate != null)
            {
                cardToUpdate.HasMatched = true;
            }
        }

        NumberOfMatches++;
        cardsToMatch.Clear();
        matchingInProgress = false;
        if (IsGameOver)
        {
            SaveHighScore();
        }
        await InvokeAsync(() => StateHasChanged());
    }

    void UnMatchCards()
    {
        Timer = new Timer(_ =>
            {
                foreach (AnimeCardDTO card in cardsToMatch)
                {
                    AnimeCardDTO? cardToUpdate = Cards.Find(c => c.Id == card.Id);
                    if (cardToUpdate != null)
                    {
                        cardToUpdate.IsFlipped = false;
                    }
                }
                cardsToMatch.Clear();
                matchingInProgress = false;
                NumberOfFailedAttempts += 10;
                InvokeAsync(() =>
                {
                    NumberOfFailedAttemptsChanged.InvokeAsync(NumberOfFailedAttempts);
                    StateHasChanged();
                });
            }, null, 500, Timeout.Infinite);
    }

    void IDisposable.Dispose()
    {
        Timer?.Dispose();
        Timer = null;
    }
}
